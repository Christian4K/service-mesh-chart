
{{- $defaults:= .Values.defaults}}

apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {{ .Release.Name }}-external-routes
  namespace: {{ .Release.Namespace }}
spec:
  hosts:
{{- range .Values.hosts }}
  - {{ . | quote }}
{{- end }}
  gateways:
  - {{ required "A valid .Values.gateway entry required!" .Values.gateway }}

  http:
{{- range .Values.routes }}

{{- /* Store general route values before version range */}}
{{- $service := required "service is required" .service }}
{{- $sanitizedServiceName := $service | replace "." "-" }}
{{- $qualifiedServiceName := printf "%s.%s.svc.cluster.local" $service (default $.Release.Namespace .namespace) }}
{{- $serviceSettings := . }}

{{- range .versions }}
{{- /* args for templates which look across sources */}}
{{- $sourcesArgs := (dict "versionSource" . "serviceSource" $serviceSettings "defaultSource" $defaults "Template" $.Template) }}

{{- /* }}
{{- $args := (dict "source" .version "componentName" "rewriteUrlPrefix" "Template" $.Template ) }}
{{ tpl $isEnabled $args }}
{{*/}}

{{- /*
   Internal only can be overridden at version level, but false is different than blank. coalesce treats false as null 
   So this is, if explicitly false or neither is true
*/}}
{{- $external := (include "platform-site.getBoolFromSources" (dict "valueName" ".internalOnly" | mustMergeOverwrite $sourcesArgs) | eq "false") }}
{{- if $external }}
{{- include "platform-site.externalMatcher" (dict "versionSource" . "serviceSource" $serviceSettings "defaults" $defaults "sourcesArgs" $sourcesArgs ) }}

{{- /* $rewriteSettings := default (default $defaults.rewriteUrlPrefix $serviceSettings.rewriteUrlPrefix) .rewriteUrlPrefix */}}
{{- /* $rewriteEnabled := include "platform-site.isComponentEnabled" (dict "componentName" "rewriteUrlPrefix" | merge $sourcesArgs) */}}

{{- $rewriteEnabled := include "platform-site.getBoolFromSources" (dict "valueName" ".rewriteUrlPrefix.enabled" | mustMergeOverwrite $sourcesArgs) | eq "true" }}

{{- if $rewriteEnabled }}
    rewrite:
      uri: {{ include "platform-site.getValueFromSources" (dict "valueName" ".rewriteUrlPrefix.replaceWith" | mustMergeOverwrite $sourcesArgs) | required "rewrite replacement is required" }}
      {{- /* required "rewrite replacement is required" $rewriteSettings.rewriteUrlPrefix.replaceWith */}}
{{- end }}
    route:
{{- if default $serviceSettings.route .route }}
  # Explicitly specified route
{{- $serviceSettings.route .route | toYaml | indent 6 }}

{{- else }} {{- /* not explicit route */}}
    - destination:
        host: {{ $qualifiedServiceName }}
        subset: {{ .version }}

{{- end }} {{- /* end if explicit route */}}

{{- include "platform-site.commonOptions" (dict "retries" .retries | mustMergeOverwrite $sourcesArgs) }}

{{- if .corsPolicy }}
    corsPolicy:
{{ .Values.defaultRouting.corsPolicy | toYaml | trim | indent 6 }}
{{- end }} {{- /* end if cors policy */ -}}

{{- end }} {{- /* internal only */ -}}
{{- end }} {{- /* end range versions */ -}}
{{- end }} {{- /* end range routes */ -}}

{{- range .Values.routes }}
{{- $service := .service }}  
{{- $sanitizedServiceName := .service | replace "." "-" }}
{{- $qualifiedServiceName := printf "%s.%s.svc.cluster.local" $service (default $.Release.Namespace .namespace) }}
{{- $serviceSettings := . }}

---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {{ $.Release.Name }}-{{ $sanitizedServiceName }}-internal-routes
spec:
  hosts:
  - {{ $qualifiedServiceName }}
  gateways:
  - mesh
  http:
{{- range .versions }}
{{- /* args for templates which look across sources */}}
{{- $sourcesArgs := (dict "versionSource" . "serviceSource" $serviceSettings "defaultSource" $defaults "Template" $.Template) }}
{{- $sanitizedVersion := .version | replace "." "-" }}
  - name: {{ printf "%s-%s-route" $sanitizedServiceName $sanitizedVersion }}
  {{- $match := default $serviceSettings.internalMatch .internalMatch }}
  {{- if $match }}
    match:
{{ $match | toYaml | indent 4 }}
  {{- end }}
    route:
    - destination:
        host: {{ $qualifiedServiceName }}
        subset: {{ .version }}
{{- include "platform-site.commonOptions" (dict "retries" .retries | mustMergeOverwrite $sourcesArgs) }}

{{- end }} {{/* end range versions */}}

---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: {{ .service | replace "." "-" }}-destination
spec:
  host: {{ $qualifiedServiceName }}
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
  subsets:
{{- range .versions }}
  - name: {{ .version }}
    labels:
      version: {{ .version }}
{{- end }} {{- /* end range versions */ -}}
{{- end }} {{- /* end range routes */ -}}