
{{- $defaults:= .Values.defaults}}

apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {{ .Release.Name }}-external-routes
  namespace: {{ .Release.Namespace }}
spec:
  hosts:
{{- range .Values.hosts }}
  - {{ . | quote }}
{{- end }}

  gateways:
  - {{ required "A valid .Values.gateway entry required!" .Values.gateway }}

  http:
{{- range .Values.routes }}

{{- /* Store general route values before version range */}}
{{- $service := required "service is required" .service }}
{{- $sanitizedServiceName := $service | replace "." "-" }}
{{- $qualifiedServiceName := printf "%s.%s" $service (default $.Release.Namespace .namespace) }}
{{- $serviceSettings := . }}

{{- range .versions }}

{{- /* args for templates which look across sources */}}
{{- $sourcesArgs := (dict "versionSource" . "serviceSource" $serviceSettings "defaultSource" $defaults "Template" $.Template) }}

{{- /* }}
{{- $args := (dict "source" .version "componentName" "rewriteUrlPrefix" "Template" $.Template ) }}
{{ tpl $isEnabled $args }}
{{*/}}

{{- /*
   Internal only can be overridden at version level, but false is different than blank. coalesce treats false as null 
   So this is, if explicitly false or neither is true
*/}}
{{- $external := or (eq .internalOnly false) (and (not .internalOnly) (not $serviceSettings.internalOnly)) }}
{{- $external := include "platform-site.getBoolFromSources" (dict "valueName" ".internalOnly" | mustMergeOverwrite $sourcesArgs) }}


{{- if $external }}
{{- if or .externalIstioMatch .externalMatchConfig }}
{{- include "platform-site.externalMatcher" (dict "service" $service "version" .version "settings" . "defaults" $defaults "sourcesArgs" $sourcesArgs ) }}
{{- else }}
{{- include "platform-site.externalMatcher" (dict "service" $service "version" .version "settings" $serviceSettings "defaults" $defaults "sourcesArgs" $sourcesArgs ) }}
{{- end }}

{{- /* $rewriteSettings := default (default $defaults.rewriteUrlPrefix $serviceSettings.rewriteUrlPrefix) .rewriteUrlPrefix */}}
{{- /* $rewriteEnabled := include "platform-site.isComponentEnabled" (dict "componentName" "rewriteUrlPrefix" | merge $sourcesArgs) */}}

{{- $rewriteEnabled := include "platform-site.getBoolFromSources" (dict "valueName" ".externalMatchConfig.rewriteUrlPrefix.enabled" | mustMergeOverwrite $sourcesArgs) }}

{{- if $rewriteEnabled }}
    rewrite:
      uri: {{ include "platform-site.getValueFromSources" (dict "valueName" ".externalMatchConfig.rewriteUrlPrefix.replaceWith" | mustMergeOverwrite $sourcesArgs) 
              | required "rewrite replacement is required" }}
      {{- /* required "rewrite replacement is required" $rewriteSettings.rewriteUrlPrefix.replaceWith */}}
{{- end}}
    route:
{{- if default $serviceSettings.route .route }}
  # Explicitly specified route
{{- $serviceSettings.route .route | toYaml | indent 6 }}

{{- else }} {{- /* not explicit route */}}
    - destination:
        host: {{ $qualifiedServiceName }}
        subset: {{ .version }}

{{- end }} {{- /* end if explicit route */}}

{{- $timeout := include "platform-site.getValueFromSources" (dict "valueName" ".timeout" | mustMergeOverwrite $sourcesArgs) }}
{{- if $timeout }}
    timeout: {{ $timeout }}
{{- end }}

{{- $retries := include "platform-site.getValueFromSources" (dict "valueName" ".retries.enabled" | mustMergeOverwrite $sourcesArgs) }}
{{- if include "platform-site.getBoolFromSources" (dict "valueName" ".retries.enabled" | mustMergeOverwrite $sourcesArgs) }}
    retries:
{{ include "platform-site.getValueFromSources" (dict "valueName" ".retries.settings" | mustMergeOverwrite $sourcesArgs) 
    | required "retry settings are required"
    | trim | indent 6 }}
{{- end }}

{{- if .corsPolicy }}
    corsPolicy:
{{ .Values.defaultRouting.corsPolicy | toYaml | trim | indent 6 }}
{{- end }} {{- /* end if cors policy */ -}}

{{- include "platform-site.retries" . }}

{{- end }} {{- /* internal only */ -}}
{{- end }} {{- /* end range versions */ -}}
{{- end }} {{- /* end range routes */ -}}

{{- range .Values.routes }}
{{ $service := .service }}  
{{ $qualifiedServiceName := printf "%s.%s" $service (default $.Release.Namespace .namespace) }}
{{- $serviceSettings := . }}

---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {{ $.Release.Name }}-{{ .service | replace "." "-" }}-internal-routes
spec:
  hosts:
  - {{ $qualifiedServiceName }}
  gateways:
  - mesh
  http:
{{- range .versions }}
    - route:
    {{- if .internalMatch }}
    {{- include "platform-site.internalMatcher" . }}
    {{ else if $serviceSettings.internalMatch }}
    {{- include "platform-site.internalMatcher" $serviceSettings }}
    {{- end }}
      - destination:
          host: {{ $qualifiedServiceName }}
          subset: {{ .version }}
{{- include "platform-site.retries" . }}
{{- end }} {{/* end range versions */}}

---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: {{ .service | replace "." "-" }}-destination
spec:
  host: {{ $qualifiedServiceName }}
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
  subsets:
{{- range .versions }}
  - name: {{ .version }}
    labels:
      version: {{ .version }}
{{- end }} {{- /* end range versions */ -}}
{{- end }} {{- /* end range routes */ -}}