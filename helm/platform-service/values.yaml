# Default values for platform-service
# Likely you will make a copy of this for your own platform service

# application name - required
app: 

version: v1
replicaCount: 1

# sample extra label, you can add as many as you want
#additionalPodLabels: |
#  saml-idp-forward-auth-filter: enabled

image:
  #registry and repository (no tag): platformteam.azurecr.io/myimage
  # v1 - consider splitting registry and repository to better mirror common usage and get better flux support
  repository:
  # image tag (i.e. 105389)
  tag:
  pullPolicy: IfNotPresent
  # name of the pullSecret for the registry if used
  pullSecret:
  containerPort: 80

# v1 - propose we remove this
fullnameOverride: ""

# v1 - obsolete - remove
forwardAuthentication:
  enabled: false # whether the login redirect & callback envoy filter should be applied
  createFilter: false 

# v1 - new api
defaultJwtpolicy:
  enabled: true
  origins:
      # required
    - issuer: # "https://sts.windows.net/.../"
      # required
      jwksUri: "https://login.microsoftonline.com/common/discovery/keys"
      # required?
      audience: # Guid

# v1 see above
jwt:
  createPolicy: false # whether JWT authorization policy should be applied
  issuer: # "https://sts.windows.net/.../"
  jwksUri: "https://login.microsoftonline.com/common/discovery/keys"

service:
  # unspecified for default microservice (for now at least)
  type:
  # port number - is required 15383
  port: 5000
  # provide access to other services
  liveness:
    enabled: false

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # Prefixes the service account with the release name
  useReleasePrefix: false
  # The name of the ServiceAccount to use (the actual service account name
  # will still be prefixed by the release prefix if that option is enabled.
  # If not set and create is true, a name is generated from the app
  name: 

gateway:
  # map virtual service to a gateway expose this service
  exposeService: true
  # gateway name (fully qualified if in a different namespace)
  name: gateway/one-gateway

defaultRouting:
  # Generate default virtual services and destination rules
  enabled: true
  # Rewrite the routing prefix to the rewriteUri
  enableRewrite: true
  # Replace the routing prefix with this uri
  rewriteUri: "/"
  # legacy rewrite flag - obsolete
  # deprecated - document and remove for v1
  rewriteUrl: false 
  # catch-all route - anything not routed elsewhere will be routed here
  # When this is used, urlPrefixes are ignored (there should be only catch-all route for this host & gateway)
  catchAll: false
  # Redirect when a trailing slash is not included in the URL prefix
  # This is applied for each provided urlPrefix or the default prefix if none provided
  # v1 - propose making this true by default
  redirectOnNoTrailingSlash: false
  # list of prefixes for route matching - overrides the default prefix (app)
  urlPrefixes:
  # route from all hosts (typically only common services)
  allHosts: false
  # hosts to take into account for routing rules (ignored if allHosts = true)
  hosts:
    - myhost.dnvgl.com

# Specify network and authorization policies
# Experimental - do not use outside of testing
accessPolicy:
  # Enable default network policy (set false and create your own if needed)
  # Experimental - do not use outside of testing
  networkPolicyEnabled: false
  # List of workloads allowed access to this workload
  # v1 - clean up this list to match what we really support
  appsAllowedAccess:
       # App identifier for workload
  #  - app1
  #  - app2
  #       # Service account name - use the default Specify service account name if you use a an alternate name
  #       alternateServiceAccountName:
  #       authorizedTo:
  #         - operation:
  #             methods: ["GET"]
  #             paths: ["/info"]


# deprecated - use volumes instead
# enable to specify volume mounted configmap settings from a file (i.e. appsettings.json)
settingsConfigMap:
  enabled: false
#  configMapName:
#  volumeName: settings-volume
#  mountPath: /app/secrets

# deprecated - use volumes instead
# enable to specify volume mounted secrets from a file (i.e. appsettings.json as secrets)
settingsSecret:
  enabled: false
#  secretName:
#  volumeName: settings-secrets-volume
#  mountPath: /app/secrets

# v1 - can we do this as a list intead of a string? Strings suck for this as you can't override sections in config (i.e. HelmRelease)
# put any environment variables here as a string
#environmentVariables: |
#  - name: Serilog__MinimumLevel
#    value: Debug
#    valueFrom:
#      secretKeyRef:
#        name: mysecret
#        key: username

# Declare any volumes: name and mountPath are used for volumeMount at the container level
# volumeDefinition string underneath is copied verbatim into volumes
volumes:
#  - name: 
#    mountPath: 
#    volumeDefinition: |
#      azureFile:

# Resource requests and limits for primary container in pod
resources: {}
#  requests:
#    cpu: 250m
#    memory: 64Mi
#  limits:
#    cpu: 500m
#    memory: 128Mi

# Adjust resources requested for proxy sidecar (see https://istio.io/docs/concepts/performance-and-scalability/#cpu-and-memory)
proxyResources: {}
  # request values are passed to the envoy proxy through annotations
  # these may be set globally at the istio level, so only override by service if necessary
  # requests:
    # cpu: 10m
    # memory: 64Mi
  # limits are not currently supported

nodeSelector: {}

tolerations: []

affinity: {}
