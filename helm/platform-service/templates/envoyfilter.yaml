# v1 - replace
{{- if not .Values.deploymentOnly -}}
{{- if .Values.forwardAuthentication.createFilter -}}
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: authn-filter
spec:
  workloadLabels:
  #this label will get searched across namespaces
    authn-req-test: enabled
  filters:
  - filterConfig:
      inlineCode: |
        function trim(s)
          return (s:gsub("^%s*(.-)%s*$", "%1"))
        end
        function stringSplit(inputstr, sep)
          if sep == nil then
            sep = "%s"
          end
          local t={}
          for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
            table.insert(t, trim(str))
          end
          return t
        end
        function getMapFromString(str, separator)
          local map = {}
          if(str ~= nil) then
            local kvPairs = stringSplit(str, separator)
            for _, v in pairs(kvPairs) do
              local i, j = string.find(v, "=")
              if(j ~= nil) then
                local key = string.sub(v, 1, j - 1)
                local value = string.sub(v, j + 1)
                map[key] = value
              end
            end
          end
          return map
        end
        function envoy_on_request(request_handle)
          -- request_handle:logWarn("================= Start envoy_on_request =====================")
          local headers = request_handle:headers()
          local authz = headers:get("authorization")
          local method = headers:get(":method")
          local path = "/"..headers:get("x-appname")..headers:get(":path")
          local cookieMap = getMapFromString(headers:get("cookie"), ";")
          local token = nil
          if(string.lower(method) == "post" and path == "/demo-vue/callback") then
            request_handle:logWarn("Handling authentication callback...")
            local body = request_handle:body()
            local bytes = body:getBytes(0, body:length())
            local fragments = getMapFromString(bytes, "&")
            request_handle:respond(
              {
                [":status"] = "302",
                ["Location"] = cookieMap["preauth_path"],
                ["Set-Cookie"] = "access_token="..fragments["access_token"].."; Secure; Path=/"
                },
              nil)
          end
          if(authz == nil) then
            token = cookieMap["access_token"]
            if(token ~= nil) then
              headers:add("authorization", "Bearer "..token)
              authz = "Bearer "..token
            end
          end
          -- check authorization header again (after populating from cookie)
          if(authz == nil) then
            request_handle:logWarn("No access token. Redirecting to login.")
            request_handle:respond(
              {
                [":status"] = "302",
                ["Location"] = "https://login.microsoftonline.com/adf10e2b-b6e9-41d6-be2f-c12bb566019c/oauth2/authorize?client_id=a37d8818-b11d-4c73-90f9-13450a2f3791&redirect_uri=https%3A%2F%2Fonegateway.dnvgl.com%2Fdemo-vue%2Fcallback&nonce=21356&scope=openid%20profile&response_type=id_token%20token&resource=http%3A%2F%2Fservice-mesh-cluster-2SP-20190130184952&response_mode=form_post",
                ["Set-Cookie"] = "preauth_path=https://"..headers:get(":authority")..path.."; Secure; Path=/"
              },
              nil)
          else
            request_handle:logWarn("Request contained access token.")
          end
          -- request_handle:logWarn("--------------------------------------------------")
        end

        function envoy_on_response(response_handle)
        end
    filterName: envoy.lua
    filterType: HTTP
    listenerMatch:
      listenerType: ANY
{{- end }}
{{- end }}
